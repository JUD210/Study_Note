# 문제 설명
# 아무 원소도 들어있지 않은 빈 배열 X가 있습니다. 길이가 같은 정수 배열 arr과 boolean 배열 flag가 매개변수로 주어질 때, flag를 차례대로 순회하며 flag[i]가 true라면 X의 뒤에 arr[i]를 arr[i] × 2 번 추가하고, flag[i]가 false라면 X에서 마지막 arr[i]개의 원소를 제거한 뒤 X를 return 하는 solution 함수를 작성해 주세요.
#
# 제한사항
# 1 ≤ arr의 길이 = flag의 길이 ≤ 100
# arr의 모든 원소는 1 이상 9 이하의 정수입니다.
# 현재 X의 길이보다 더 많은 원소를 빼는 입력은 주어지지 않습니다.
#
# 입출력 예
# arr               | flag                                | result
# [3, 2, 4, 1, 3]   | [true, false, true, false, false]   | [3, 3, 3, 3, 4, 4, 4, 4]
#
# 입출력 예 설명
# 입출력 예 #1
# 예제 1번에서 X의 변화를 표로 나타내면 다음과 같습니다
# i | flag[i] | arr[i]  | X
#                         []
# 0 | true    | 3       | [3, 3, 3, 3, 3, 3]
# 1 | false   | 2       | [3, 3, 3, 3]
# 2 | true    | 4       | [3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4]
# 3 | false   | 1       | [3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]
# 4 | false   | 3       | [3, 3, 3, 3, 4, 4, 4, 4]
# 따라서 [3, 3, 3, 3, 4, 4, 4, 4]를 return 합니다.


def solution(arr, flag):
    answer = []
    for n, b in zip(arr, flag):
        if b:
            for i in range(n * 2):
                answer.append(n)
        else:
            answer = answer[: len(answer) - n]
    return answer

    # += 보다는 append
    # 리스트 슬라이싱 보다는 pop

    """ GPT
    append() 사용과 pop() 사용은 메모리 효율성과 실행 속도 측면에서 좋은 방법이에요, 특히 코딩 테스트 같은 상황에서는요.

    += 연산자로 리스트에 요소를 추가하는 것은 새로운 리스트를 생성하고, 원본 리스트와 추가할 요소를 합쳐서 그 결과를 저장하는 과정을 거칩니다. 이는 메모리 사용량을 증가시킬 수 있어요. 반면에, append() 메소드는 현재 리스트에 직접 요소를 추가하므로 추가적인 메모리 할당이 필요 없어 효율적이죠.

    리스트 슬라이싱을 사용해 리스트의 일부를 제거하는 것은 새로운 리스트 객체를 생성하게 되므로, 이 경우에도 추가적인 메모리가 사용됩니다. 반면에, pop() 메소드는 리스트의 마지막 요소를 제거하고, 해당 요소를 반환하는데, 이 과정에서 새로운 리스트를 생성하지 않으므로 메모리 사용량을 줄일 수 있어요.
    """


# SOL 1
def solution(arr, flag):
    X = []
    for i, f in enumerate(flag):
        if f:
            X += [arr[i]] * (arr[i] * 2)
        else:
            for _ in range(arr[i]):
                X.pop()
    return X


""" GPT
zip 사용:
두 리스트(arr, flag)의 요소를 동시에 순회해야 할 때 유용해.
두 리스트의 관련 요소를 함께 처리해야 하는 경우에 적합해.
위의 문제에서는 arr의 각 요소와 flag의 해당하는 불리언 값이 함께 필요하기 때문에 zip을 사용하는 것이 자연스럽고 직관적이야.

enumerate 사용:
단일 리스트를 순회하면서 각 요소의 인덱스도 필요한 경우에 좋아.
리스트의 요소와 함께 그 요소의 위치(인덱스)를 알고 싶을 때 사용돼.
하지만, 여기서는 arr과 flag 두 리스트를 동시에 다뤄야 하기 때문에 enumerate만으로는 충분하지 않아.

효율성과 가독성:
효율성 측면에서는 두 방법 사이에 큰 차이가 없어. Python의 zip과 enumerate 함수는 모두 이터레이터를 반환하기 때문에, 메모리 사용 측면에서 효율적이야. 다만, 처리해야 할 데이터의 양과 구체적인 사용 방법에 따라 성능에 미세한 차이가 발생할 수 있어.

가독성 측면에서는 코드의 의도와 상황에 따라 다르지만, 이 경우에는 zip을 사용한 방식이 두 리스트의 요소를 동시에 처리해야 하는 상황을 더 명확하게 표현해줘서 가독성이 더 좋을 수 있어.
종합적으로, 주어진 문제에 대한 해결 방식으로는 zip을 사용한 첫 번째 방법이 더 직관적이고 가독성이 좋은 선택이 될 것 같아. zip은 arr과 flag 리스트의 각 요소를 쌍으로 묶어 처리하는 데 매우 적합하니까, 이 문제 상황에서는 zip 사용이 더 자연스러워 보여!
"""
